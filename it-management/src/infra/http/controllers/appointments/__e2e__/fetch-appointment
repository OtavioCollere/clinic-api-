import { INestApplication } from '@nestjs/common'
import { JwtService } from '@nestjs/jwt'
import { Test } from '@nestjs/testing'
import { AppModule } from 'src/app.module'
import { DatabaseModule } from 'src/infra/database/database.module'
import { PrismaService } from 'src/infra/database/prisma/prisma.service'
import request from 'supertest'
import { AppointmentFactory } from 'test/factories/make-appointment'
import { UserFactory } from 'test/factories/make-user'
import {describe, it, expect} from 'vitest'

describe('Fetch appointmments (E2E)', () => {
  let app: INestApplication
  let appointmentFactory : AppointmentFactory
  let userFactory : UserFactory
  let jwt : JwtService
  let prisma : PrismaService

  beforeAll(async () => {
    const moduleRef = await Test.createTestingModule({
      imports: [AppModule, DatabaseModule],
      providers : [UserFactory, AppointmentFactory]
    }).compile()

    app = moduleRef.createNestApplication()

    prisma = moduleRef.get(PrismaService)
    appointmentFactory = moduleRef.get(AppointmentFactory)
    userFactory = moduleRef.get(UserFactory)
    jwt = moduleRef.get(JwtService)

    await app.init()
  })

  it("[GET] /appointments", async () => {

    const user = await userFactory.makePrismaUser({
      name : 'Otavio'
    })

    const access_token = jwt.sign({
      sub: user.id.toString()
    })

    for(let i = 0; i < 5; i++) {
      let description;

      if(i < 2)
      {
        description = `desc test ${i}`
      }

      await appointmentFactory.makePrismaAppointment({
        userId : user.id,
        description : description
      })
    }

    const result = await request(app.getHttpServer())
    .get('/appointments')
    .send({
      query : 'desc test',
      page : 1
    })
    .set('Authorization', `Bearer ${access_token}`)

    expect(result.statusCode).toEqual(200)
    expect(result.body.appointments.length).toEqual(2)

  })


})