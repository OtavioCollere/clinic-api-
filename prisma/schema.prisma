generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  sector    String
  password  String
  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())

  // back-relations clarinhas e com nomes distintos
  appointments      Appointment[]
  procedures        Procedure[]   @relation("UserProcedures") // procedures do usuário (quem recebeu)
  updatedProcedures Procedure[]   @relation("ProcedureUpdatedBy") // procedures que este usuário atualizou
}

model Appointment {
  id          String    @id @default(uuid())
  name        String
  description String?
  duration    Int?
  status      String
  dateHour    DateTime
  updatedBy   String?
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())

  user       User        @relation(fields: [userId], references: [id])
  userId     String
  procedures Procedure[]
}

enum ProcedureName {
  BOTOX
  PREENCHIMENTO
  LAVIEEN
}

model Procedure {
  id            String        @id @default(uuid())
  appointmentId String
  userId        String
  updatedById   String? // quem atualizou (opcional)
  name          ProcedureName
  value         Float
  product       String?
  region        String
  updatedAt     DateTime?     @updatedAt
  createdAt     DateTime?     @default(now())

  // relações COM NOMES para tirar ambiguidade
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  user        User        @relation("UserProcedures", fields: [userId], references: [id])
  updatedBy   User?       @relation("ProcedureUpdatedBy", fields: [updatedById], references: [id])
}
